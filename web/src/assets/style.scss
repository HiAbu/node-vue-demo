/*reset*/

* {
  box-sizing: border-box;
  outline: none;
}
html {
  font-size: 13px;
}
body {
  margin: 0;
  font-family: Arial, Helvetica, sans-serif;
  line-height: 1.2em;
  background: #f1f1f1;
}

a {
  color: #999;
}

/*colors*/
//定义变量可以是数组或者键值对，如果是键值对，用逗号隔开。可以用引号引起来变量名，以免跟色值white混淆
$colors: (
  'primary': #db9e3f,
  'white': #fff,
  'light': #f9f9f9,
  'gray': #999,
  'dark-1': #343440,
  'dark': #222,
  'black': #000
);

@each $colorKey, $color in $colors {
  .text-#{$colorKey} {
    color: $color;
  }
  .bg-#{$colorKey} {
    background-color: $color;
  }
}

/*text align*/
@each $var in (left, center, right) {
  .text-#{$var} {
    text-align: $var;
  }
}

/*font size*/
$base-font-size: 1rem;
$font-sizes: (
  //10px
    xs: 0.769231,
  //12px
    sm: 0.923077,
  //13
    md: 1,
  //14
    lg: 1.076923,
  //16
    xl: 1.230769
);

@each $sizeKey, $size in $font-sizes {
  .fs-#{$sizeKey} {
    font-size: $size * $base-font-size;
  }
}

/*flex*/

.d-flex {
  display: flex;
}
//垂直方向布局
.flex-column {
  flex-direction: column;
}
//主轴对齐方式 justify-content
$flex-jc: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around
);

@each $key, $value in $flex-jc {
  .jc-#{$key} {
    justify-content: $value;
  }
}

//交叉轴对齐方式 align-items
$flex-ai: (
  start: flex-start,
  end: flex-end,
  center: center,
  stretch: stretch
);

@each $key, $value in $flex-ai {
  .jc-#{$key} {
    align-items: $value;
  }
}

//flex-grow  存在剩余空间，各个同级模块拉伸比例
//  flex-shrink 不足剩余空间，各个同级模块压缩比例
//   flex-basis 分配剩余空间之前，占据的主轴空间
//flex:  是flex-grow   flex-shrink flex-basis的简写
//auto 代表 1 1 auto ，none代表 0 0 auto。auto是根据内容来分配大小，1就是直接平均分配

//这里简写 shrink grow 都是1
.flex-1 {
  flex: 1;
}
// 就是自动占满剩余空间
.flex-grow-1 {
  flex-grow: 1;
}

//spacing
//.mt-1  margin-top 1级 pb-2
$spacing-types: (
  m: margin,
  p: padding
);
$spacing-directions: (
  t: top,
  b: bottom,
  r: right,
  l: left
);
$spacing-base-size: 1rem;

$spacing-sizes: (
  0: 0,
  1: 0.25,
  2: 0.5,
  3: 1,
  4: 1.5,
  5: 3
);

@each $typeKey, $type in $spacing-types {
  //.m-1
  @each $sizeKey, $size in $spacing-sizes {
    .#{$typeKey}-#{$sizeKey} {
      #{$type}: $size * $spacing-base-size;
    }
  }

  //.mx-1 .my-1 水平和垂直各自定义
  @each $sizeKey, $size in $spacing-sizes {
    .#{$typeKey}x-#{$sizeKey} {
      #{$type}-left: $size * $spacing-base-size;
      #{$type}-right: $size * $spacing-base-size;
    }
    .#{$typeKey}y-#{$sizeKey} {
      #{$type}-top: $size * $spacing-base-size;
      #{$type}-bottom: $size * $spacing-base-size;
    }
  }

  //.mt-1
  @each $directionKey, $direction in $spacing-directions {
    @each $sizeKey, $size in $spacing-sizes {
      // .mt-1{margin-top:0.25rem}
      .#{$typeKey}#{$directionKey}-#{$sizeKey} {
        #{$type}-#{$direction}: $size * $spacing-base-size;
      }
    }
  }
}
